;------------------------------
;read_chs(drive,sect,dst)
;------------------------------
;戻り値  | 読み込んだセクタ数
;drive   | drive構造体のアドレス
;sect    | セクタ数
;dst     | コピー先
;------------------------------

read_chs:

;------------------------------
;【スタックフレームの構築】
;------------------------------
; +08 | コピー先
; +06 | セクタ数
; +04 | パラメータバッファ
;-----|------------------------
; +02 | IP(戻り番地)
; BP+0| BP(元の値)
; -02 | リトライ回数
; -04 | 読み込みセクタ数
;------------------------------

push    bp
mov     bp,sp
push    3           ; retry = 3;
push    0           ; sect  = 0;

;------------------------------
;【レジスタの保存】
;------------------------------
push bx
push cx
push dx
push es
push si

;------------------------------
;【処理の開始】
;------------------------------
mov si,[bp + 4]                 ;   SI = SRCバッファ

;------------------------------
;CXレジスタの設定
;(BIOSコールの呼び出しに適した形に変換)
;------------------------------
mov ch,[si + drive.cyln + 0]    ;   CH = シリンダ番号(下位バイト)
mov cl,[si + drive.cyln + 1]    ;   CL = シリンダ番号(上位バイト)
shl cl,6                        ;   CL <<= 6; // 上位2ビットにシフト
or  cl,[si + drive.sect]        ;   CL |= セクタ番号

;------------------------------
;セクタ読み込み
;------------------------------
mov dh,[si + drive.head]        ;   DH = ヘッド番号
mov dl,[si + 0]                 ;   DL = ドライブ番号
mov ax,0x0000                   ;   AX = 0x0000
mov es,ax                       ;   ES = セグメント
mov bx,[bp + 8]                 ;   BX = コピー先

.10L:
    mov ah,0x02                 ;	読み込みモードをセクタ読み込みに設定
    mov al,[bp + 6]             ;   読み込みセクタ数を指定

    int 0x13                    ;   BIOS読み込み命令実行
                                ;   結果は【CF】に保存される
                                ;   0=成功,1=失敗

    jnc .11E                    ;   if(CF == 0){
    mov al,0                    ;   AL = 0
    jmp .10E                    ;   終了 }

.11E:                           ;   読み込みが失敗した場合
    cmp al,0                    ;   AL(読み込みセクタ数) == 0か確認
    jne .10E                    ;   if(AL == 0) ; ALが0と等しくない場合
                                ;   {
    mov ax,0                    ;       AX = 0;
    dec word[bp - 2]            ;       リトライ回数--;
    jnz .10L                    ;       goto .10L
                                ;   }
.10E:
    mov ah,0                    ;   AH = 0; //ステータス情報を破棄

;------------------------------
;【レジスタの復帰】
;------------------------------
pop si
pop es
pop dx
pop cx
pop bx

;------------------------------
;【スタックフレームの破棄】
;------------------------------
mov sp,bp
pop bp

ret